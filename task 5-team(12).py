# -*- coding: utf-8 -*-
"""churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15fMbU9CKrEn9QR9raQpBvI_caJC_oOp7
"""



# Commented out IPython magic to ensure Python compatibility.
#import necessary libraries
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import sklearn
from sklearn.preprocessing import LabelEncoder,OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,f1_score

data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 7043 entries, 0 to 7042
Data Columns (total 20 columns):

#import dataset
data= pd.read_csv("/content/Churn_Modelling.csv")

#checking for null values
data.TotalCharges=pd.to_numeric(data.TotalCharges, errors='coerce' )
data.insull().any()

<class 'pandas.core.frame.pd.DataFrame'>
RangeIndex: 7043 entries,0 to 7042
Data columns(total 20 columns):

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data["gender"]=le.fit_transform(data["gender"])
data["partner"]=le.fit_transform(data["partner"])
data["Dependents"]=le.fit_transform(data["Depenents"])
data["PhoneService"]=le.fit_transform(data["PhoneService"])
data["MultipleLines"]=le.fit_transform(data["MultipleLines"])
data["InternetService"]=le.fit_transform(data["InternetService"])
data["OnlineSecurity"]=le.fit_transform(data["OnlineSecurity"])
data["OnlineBackup"]=le.fit_transform(data["OnlineBackup"])
data["DeviseProtection"]=le.fit_transform(data["DeviseProtection"])
data["TechSupport"]=le.fit_transform(data["TechSupport"])
data["StreamingTV"]=le.fit_transform(data["StreamingTV"])
data["StreamingMovies"]=le.fit_transform(data["StreamingMovies"])
data["Contract"]=le.fit_transform(data["Contract"])
data["PaperlessBilling")=le.fit_transform(data["PaperlessBilling"])
data["PaymentMethod"]=le.fit_transfom(data["PaymentMethod"])
data["Churn"]=le.fit_transform(data["Churn"])

data.head()

x= data.iloc[:,0:19].values
y= data.iloc[:,19:20].values

from sklearn.preprocessing import OneHotEncoder
One= OneHotEncoder()

data.describe()

plt.figure(figsize-(12,5))
plt.subplot(1,2,1)
sns.distplot(data["tenure"])
plt.subplot(1,2,2)
sns.distplot(data["MonthlyCharges"])

plt.figure(figure=(12,5))
plt.subplot(1,2,2)
sns.countplot(data["gender"])
plt.subplot(1,2,2)
sns.countplot(data["Dependents"])

sns.heatmap(data.corr(),annot-true)

sns.apirplot(data=data, market=["^","v"],palette="inferno")

#importing and building the Decision tree model
def logreg(x_train,x_test,y_train,y_test):
    lr = LogisticsRegression(random_state=0)
    lr.fit(x_train,y_train)
    y_lr_tr = lr.predict(x_train)
    print(accuracy_score(ypred_lr_tr,y_train))
    yPred_lr = lr.predict(x_test)
    print(accuracy_score(y_pred_lr,y_test))
    print("***Logistics Regression***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,ypred_lr))
    print("Classification Report")
    print(classification_report(y_test,ypred_lr))

#importing and building the Decision tree model
def decisionTree(x_train,x_test,y_train,y_test):
  dtc = decisionTreeClassifier(criterion="entropy",random_state=0)
  dtc.fit(x_train,y_train)
  y_dt_tr = dtc.predict(x_train)
  print(accuracy_score(y_pred_dt_tr,y_train))
  ypred_dt = dtc.predict(x_test)
  print(accuracy_score(y_pred_dt,y_test))
  print("***Decision Tree***")
  print("confusion_Matrix")
  print(confusion_matrix(y_pred_dt))
  print("Classification Report")
  print(classification_report(y_test,ypred_dt))

#printing the train accuracy and test accuracy respectively
decisionTree(x_train,x_test,y_train,y_test)

#importing and building the random forest model
def RandomForest(x_train,x_test,y_train,y_test):
    rf = RandomForestClassifier(criterion="entropy",n_estimators=10,random_state=0)
    rf.fit(x_train,y_train)
    y_rf_tr = rf.predict(x_train)
    print(accuracy_score(y_rf_tr,y_train))
    yPred_rf = rf.predict(x_test)
    print(accuracy_score(yPred_rf,y_test))
    print("***Random Forest***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,yPred_rf))
    print(classification_report(y_test,yPred_rf))

RandomForest(x_train,x_test,y_train,y_test)

#importing and building the KNN model
def KNN(x_train,x_test,y_train,y_test):
  knn = KNeighborsClasifier()
  knn.fit(x_train,y_train)
  y_knn_tr = knn.predict(x_train)
  print(accuracy_score(yPred_knn,y_test))
  print("***KNN***")
  print("Confusion_Matrix")
  print(confusion_matrix(y_test,yPred_knn))
  print("Classification_report(y_test,yPred_knn")

KNN(x_train,x_test,y_train,y_test)

#importing and building the random forest model
def svm(x_train,x_test,y_train,y_test):
    svm = SVC(kernel = "linear")
    svm.fit(x_train,y_train)
    y_svm_tr = svm.predict(x_train)
    print(accuracy_score(y_svm_tr,y_train))
    yPred_svm = svm.predict(x_test)
    print(accuracy_score(yPred_svm,y_test))
    print("***Support Vector Machine***")
    print("Confusion_Matrix")
    print(confusion_matrix(y_test,yPred_svm))
    print("Classification Report")
    print(classification_report(y_test,yPred_svm))

svm(x_train,x_test,y_train,y_test)

#importing the keras libraries and packages
import keras
from keras.models import sequential
from keras.layers import Dense

classifier = sequential()

classifier.add(Dense(unit=30,activation='relu',input_dim=40))

classifier.add(Dense(unit=30, activation='relu'))

classifier.add(Dense(unit=1, activation='sigmoid'))

classifier.compile(optimize='adam',loss='binary_crossentropy',metrics['accuracy'])

#Fitting the ANN to the Training set
model_history = classifier.fit(x_train,y_train, batch_size=10,validation_split=0.33, epochs=200)

ann_pred = classifier.predict(x_test)
ann_pred = (ann_pred>0.5)
ann_pred

print(accuracy_score(ann_pred,y_test))
print("***ANN Model***")
print("Confusion_Matrix")
print(confusion_matrix(y_test,ann_pred))
print("Classification Report")
print(classification_report(y_test,ann_pred))

